---
- name: create sentinel working directory
  file:
    path: "{{ redis_sentinel_dir }}"
    state: directory
    recurse: yes
    owner: "{{ redis_user }}"

- name: create redis_sentinel service for RHEL7+
  template:
    src: "redis_sentinel.service.j2"
    dest: /usr/lib/systemd/system/{{ redis_sentinel_systemd_service_name }}.service
    mode: 0755
  when: redis_as_service


- name: set sentinel to start at boot
  service:
    name: "{{ redis_sentinel_systemd_service_name }}"
    enabled: yes
  when: redis_as_service

# Check then create log dir to prevent aggressively overwriting permissions
- name: check if sentinel log directory exists
  stat:
    path: "{{ redis_sentinel_logfile|dirname }}"
  register: sentinel_logdir
  changed_when: false
  when: redis_sentinel_logfile != '""'

- name: create sentinel log directory if it does not exist
  file:
    state: directory
    path: "{{ redis_sentinel_logfile|dirname }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when:
    - redis_sentinel_logfile != '""'
    - not sentinel_logdir.stat.exists

- name: touch the sentinel log file
  file:
    state: touch
    path: "{{ redis_sentinel_logfile }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  changed_when: false
  when: redis_sentinel_logfile != '""'

- name: check if sentinel pid directory exists
  stat:
    path: "{{ redis_sentinel_pidfile|dirname }}"
  register: sentinel_piddir
  changed_when: false
  when: redis_sentinel_pidfile != '""'

- name: create sentinel pid directory if it does not exist
  file:
    state: directory
    path: "{{ redis_sentinel_pidfile|dirname }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when:
    - redis_sentinel_pidfile != '""'
    - not sentinel_piddir.stat.exists

- name: create sentinel config file
  template:
    src: redis_sentinel.conf.j2
    dest: "{{ redis_sentinel_config }}"
    owner: "{{ redis_user }}"
  notify: restart sentinel

# Flush handlers before ensuring the service is started to prevent
# a start and then restart
- name: flush handlers to apply config changes
  meta: flush_handlers

- name: ensure sentinel is running
  service:
    name: "{{ redis_sentinel_systemd_service_name }}"
    state: started
  when: redis_as_service
